generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id       String    @id @default(uuid())
  name     String?
  email    String?   @unique
  username String?   @unique
  password String?
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Talent {
  id                 String   @id @default(uuid())
  avatar             String
  name               String
  mbti               String
  role               String
  experience         Int
  lastEducation      String   @map("last_education")
  startEducationYear Int      @map("start_education_year")
  endEducationYear   Int      @map("end_education_year")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  projects Project[]
  links    Link[]

  @@map("talents")
}

model Project {
  id          String   @id @default(uuid())
  talentId    String   @map("talent_id")
  picture     String?
  name        String
  role        String
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  description String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  talent Talent @relation(fields: [talentId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Link {
  id        String   @id @default(uuid())
  slug      String
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  target    String
  passcode  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  talents Talent[]

  @@map("links")
}
